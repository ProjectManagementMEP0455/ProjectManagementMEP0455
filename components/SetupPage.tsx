import React, { useState } from 'react';

interface SetupPageProps {
  onConfigured: () => void;
}

const supabaseSchema = `
-- MEP Project Management Pro - Supabase Schema
-- Version: 1.1
-- Description: This script sets up the entire database schema, including tables,
-- helper functions, row-level security (RLS) policies, and triggers.
-- It is idempotent, meaning it can be run safely multiple times.

-- 1. TABLES
-- Create the profiles table to store user data, linked to Supabase auth.
CREATE TABLE IF NOT EXISTS public.profiles (
  id uuid NOT NULL PRIMARY KEY REFERENCES auth.users(id) ON DELETE CASCADE,
  full_name text,
  avatar_url text,
  role text DEFAULT 'Site Engineer / Technician'
);
ALTER TABLE public.profiles ENABLE ROW LEVEL SECURITY;

-- Create the projects table.
CREATE TABLE IF NOT EXISTS public.projects (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  created_at timestamp with time zone DEFAULT now() NOT NULL,
  name text NOT NULL,
  description text,
  start_date date,
  end_date date,
  budget numeric,
  spent numeric DEFAULT 0,
  status text DEFAULT 'Planning' NOT NULL,
  created_by uuid NOT NULL REFERENCES public.profiles(id) ON DELETE CASCADE
);
ALTER TABLE public.projects ENABLE ROW LEVEL SECURITY;

-- Create the tasks table.
CREATE TABLE IF NOT EXISTS public.tasks (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  created_at timestamp with time zone DEFAULT now() NOT NULL,
  name text NOT NULL,
  description text,
  status text DEFAULT 'To Do' NOT NULL,
  due_date date,
  assignee_id uuid REFERENCES public.profiles(id) ON DELETE SET NULL,
  project_id bigint NOT NULL REFERENCES public.projects(id) ON DELETE CASCADE,
  percent_complete integer DEFAULT 0
);
ALTER TABLE public.tasks ENABLE ROW LEVEL SECURITY;

-- Create the milestones table.
CREATE TABLE IF NOT EXISTS public.milestones (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  created_at timestamp with time zone DEFAULT now() NOT NULL,
  name text NOT NULL,
  due_date date NOT NULL,
  project_id bigint NOT NULL REFERENCES public.projects(id) ON DELETE CASCADE,
  completed boolean DEFAULT false NOT NULL
);
ALTER TABLE public.milestones ENABLE ROW LEVEL SECURITY;

-- Create a junction table for team members.
CREATE TABLE IF NOT EXISTS public.project_team_members (
  project_id bigint NOT NULL REFERENCES public.projects(id) ON DELETE CASCADE,
  user_id uuid NOT NULL REFERENCES public.profiles(id) ON DELETE CASCADE,
  PRIMARY KEY (project_id, user_id)
);
ALTER TABLE public.project_team_members ENABLE ROW LEVEL SECURITY;

-- 2. HELPER FUNCTIONS
-- Helper function to check if a user is a member of a project team.
CREATE OR REPLACE FUNCTION is_member_of_project(p_project_id bigint, p_user_id uuid)
RETURNS boolean AS $$
BEGIN
  RETURN EXISTS (
    SELECT 1
    FROM project_team_members
    WHERE project_id = p_project_id AND user_id = p_user_id
  );
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- 3. ROW-LEVEL SECURITY (RLS) POLICIES

-- PROFILES POLICIES
DROP POLICY IF EXISTS "Public profiles are viewable by everyone." ON public.profiles;
CREATE POLICY "Public profiles are viewable by everyone." ON public.profiles FOR SELECT USING (true);

DROP POLICY IF EXISTS "Users can insert their own profile." ON public.profiles;
CREATE POLICY "Users can insert their own profile." ON public.profiles FOR INSERT WITH CHECK (auth.uid() = id);

DROP POLICY IF EXISTS "Users can update own profile." ON public.profiles;
CREATE POLICY "Users can update own profile." ON public.profiles FOR UPDATE USING (auth.uid() = id);

-- PROJECTS POLICIES
DROP POLICY IF EXISTS "Users can create projects for themselves." ON public.projects;
CREATE POLICY "Users can create projects for themselves." ON public.projects FOR INSERT
  WITH CHECK (auth.uid() = created_by);

DROP POLICY IF EXISTS "Team members can view their projects." ON public.projects;
CREATE POLICY "Team members can view their projects." ON public.projects FOR SELECT
  USING (is_member_of_project(id, auth.uid()));
  
DROP POLICY IF EXISTS "Only project creator can update a project." ON public.projects;
CREATE POLICY "Only project creator can update a project." ON public.projects FOR UPDATE
  USING (auth.uid() = created_by);

DROP POLICY IF EXISTS "Only project creator can delete a project." ON public.projects;
CREATE POLICY "Only project creator can delete a project." ON public.projects FOR DELETE
  USING (auth.uid() = created_by);

-- PROJECT TEAM MEMBERS POLICIES
DROP POLICY IF EXISTS "Team members can view project members." ON public.project_team_members;
CREATE POLICY "Team members can view project members." ON public.project_team_members FOR SELECT
  USING (is_member_of_project(project_id, auth.uid()));

DROP POLICY IF EXISTS "Project creators can add team members." ON public.project_team_members;
CREATE POLICY "Project creators can add team members." ON public.project_team_members FOR INSERT
  WITH CHECK ((
    SELECT created_by FROM projects WHERE id = project_id
  ) = auth.uid());

-- TASKS & MILESTONES POLICIES (Allow full access for team members)
DROP POLICY IF EXISTS "Team members can manage tasks." ON public.tasks;
CREATE POLICY "Team members can manage tasks." ON public.tasks FOR ALL
  USING (is_member_of_project(project_id, auth.uid()));

DROP POLICY IF EXISTS "Team members can manage milestones." ON public.milestones;
CREATE POLICY "Team members can manage milestones." ON public.milestones FOR ALL
  USING (is_member_of_project(project_id, auth.uid()));

-- 4. TRIGGERS
-- Function to create a profile for a new authenticated user.
CREATE OR REPLACE FUNCTION public.handle_new_user()
RETURNS trigger AS $$
BEGIN
  INSERT INTO public.profiles (id, full_name, avatar_url, role)
  VALUES (
    new.id,
    new.raw_user_meta_data->>'full_name',
    new.raw_user_meta_data->>'avatar_url',
    'Site Engineer / Technician'
  );
  -- Also add the creator to their own project team
  INSERT INTO public.project_team_members (project_id, user_id)
  SELECT p.id, new.id
  FROM public.projects p
  WHERE p.created_by = new.id;
  RETURN new;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Trigger to execute the function on new user creation.
DROP TRIGGER IF EXISTS on_auth_user_created ON auth.users;
CREATE TRIGGER on_auth_user_created
  AFTER INSERT ON auth.users
  FOR EACH ROW EXECUTE FUNCTION public.handle_new_user();
`;

const SetupPage: React.FC<SetupPageProps> = ({ onConfigured }) => {
  const [supabaseUrl, setSupabaseUrl] = useState('');
  const [supabaseAnonKey, setSupabaseAnonKey] = useState('');
  const [error, setError] = useState('');
  const [step, setStep] = useState(1);

  const handleSaveCredentials = () => {
    if (!supabaseUrl.trim() || !supabaseAnonKey.trim()) {
      setError('Both Supabase URL and Anon Key are required.');
      return;
    }
    if (!supabaseUrl.startsWith('http')) {
      setError('Please enter a valid Supabase URL.');
      return;
    }
    localStorage.setItem('supabaseUrl', supabaseUrl);
    localStorage.setItem('supabaseAnonKey', supabaseAnonKey);
    setError('');
    onConfigured();
  };
  
  const copySqlToClipboard = () => {
    navigator.clipboard.writeText(supabaseSchema);
    alert('SQL Schema copied to clipboard!');
  };

  const renderStepOne = () => (
    <>
      <h1 className="text-2xl font-bold text-center text-brand-primary mb-2">Backend Setup: Step 1 of 2</h1>
      <p className="text-center text-neutral-medium mb-4">
        Run the following SQL script in your Supabase project's SQL Editor to set up the database tables and security policies.
      </p>
      <div className="w-full bg-neutral-dark text-white rounded-md p-4 max-h-64 overflow-auto mb-4">
        <pre className="text-xs whitespace-pre-wrap"><code>{supabaseSchema}</code></pre>
      </div>
       <div className="flex justify-center space-x-4">
         <button
            onClick={copySqlToClipboard}
            className="w-1/2 bg-gray-600 text-white font-bold py-2 px-4 rounded-lg hover:bg-gray-700 transition-colors"
          >
            Copy SQL
          </button>
          <button
            onClick={() => setStep(2)}
            className="w-1/2 bg-brand-primary text-white font-bold py-2 px-4 rounded-lg hover:bg-brand-dark transition-colors"
          >
            Continue to Step 2
          </button>
      </div>
    </>
  );

  const renderStepTwo = () => (
    <>
      <h1 className="text-2xl font-bold text-center text-brand-primary mb-2">Backend Setup: Step 2 of 2</h1>
      <p className="text-center text-neutral-medium mb-6">
        Please provide your Supabase project credentials to connect the application.
      </p>
      {error && <p className="bg-red-100 text-red-700 p-3 rounded-md mb-4 text-center text-sm">{error}</p>}
      <div className="space-y-4">
        <div>
          <label className="text-sm font-medium text-neutral-medium" htmlFor="supabaseUrl">
            Supabase Project URL
          </label>
          <input
            id="supabaseUrl"
            type="text"
            placeholder="https://your-project-ref.supabase.co"
            value={supabaseUrl}
            onChange={(e) => setSupabaseUrl(e.target.value)}
            className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-brand-primary focus:border-brand-primary"
          />
        </div>
        <div>
          <label className="text-sm font-medium text-neutral-medium" htmlFor="supabaseAnonKey">
            Supabase Anon (public) Key
          </label>
          <input
            id="supabaseAnonKey"
            type="text"
            placeholder="eyJhbGciOiJIUz..."
            value={supabaseAnonKey}
            onChange={(e) => setSupabaseAnonKey(e.target.value)}
            className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-brand-primary focus:border-brand-primary"
          />
        </div>
        <button
          onClick={handleSaveCredentials}
          className="w-full bg-brand-primary text-white font-bold py-2 px-4 rounded-lg hover:bg-brand-dark transition-colors"
        >
          Save and Connect
        </button>
      </div>
      <div className="mt-6 text-xs text-neutral-medium text-center">
          You can find these credentials in your Supabase project's API settings. They will be stored locally in your browser.
      </div>
    </>
  );

  return (
    <div className="flex items-center justify-center min-h-screen bg-gray-100">
      <div className="p-8 bg-white rounded-lg shadow-md w-full max-w-3xl">
        {step === 1 ? renderStepOne() : renderStepTwo()}
      </div>
    </div>
  );
};

export default SetupPage;
