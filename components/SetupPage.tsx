import React, { useState } from 'react';

// The SQL schema is included here directly to avoid file loading complexities.
const sqlSchema = `-- MEP PROJECT MANAGEMENT PRO - SUPABASE SCHEMA
-- version 1.0

-- 1. TABLES
-- Create a table for public profiles
create table public.profiles (
  id uuid not null references auth.users on delete cascade,
  updated_at timestamp with time zone,
  full_name text,
  avatar_url text,
  role text,

  primary key (id)
);

-- Create projects table
create table public.projects (
  id bigint generated by default as identity primary key,
  created_at timestamp with time zone default now() not null,
  name text not null,
  description text,
  start_date date,
  end_date date,
  budget numeric,
  spent numeric,
  status text not null default 'Planning',
  created_by uuid not null references auth.users on delete cascade
);

-- Create a junction table for team members
create table public.project_team_members (
  project_id bigint not null references public.projects on delete cascade,
  user_id uuid not null references public.profiles on delete cascade,
  
  primary key (project_id, user_id)
);

-- Create tasks table
create table public.tasks (
  id bigint generated by default as identity primary key,
  created_at timestamp with time zone default now() not null,
  name text not null,
  description text,
  status text not null default 'To Do',
  due_date date,
  assignee_id uuid references public.profiles on delete set null,
  project_id bigint not null references public.projects on delete cascade,
  percent_complete smallint default 0
);

-- Create milestones table
create table public.milestones (
  id bigint generated by default as identity primary key,
  created_at timestamp with time zone default now() not null,
  name text not null,
  due_date date not null,
  completed boolean default false,
  project_id bigint not null references public.projects on delete cascade
);


-- 2. ROW LEVEL SECURITY (RLS)
-- Enable RLS for all tables
alter table public.profiles enable row level security;
alter table public.projects enable row level security;
alter table public.project_team_members enable row level security;
alter table public.tasks enable row level security;
alter table public.milestones enable row level security;

-- Policies for 'profiles' table
create policy "Users can view their own profile." on public.profiles for select using (auth.uid() = id);
create policy "Users can update their own profile." on public.profiles for update using (auth.uid() = id);
create policy "Allow authenticated users to view all profiles." on public.profiles for select to authenticated using (true); -- Needed for assignee dropdowns


-- RLS Helper function to check project membership
create or replace function is_member_of_project(p_project_id bigint, p_user_id uuid)
returns boolean
language plpgsql
security definer
as $$
begin
  return exists (
    select 1
    from project_team_members
    where project_id = p_project_id and user_id = p_user_id
  );
end;
$$;

-- Policies for 'projects' table
create policy "Team members can view their projects." on public.projects for select using (is_member_of_project(id, auth.uid()));
create policy "Project creator can update their project." on public.projects for update using (auth.uid() = created_by);
create policy "Authenticated users can create projects." on public.projects for insert with check (auth.role() = 'authenticated');
create policy "Project creator can delete their project." on public.projects for delete using (auth.uid() = created_by);

-- Policies for 'project_team_members' table
create policy "Team members can view project members." on public.project_team_members for select using (is_member_of_project(project_id, auth.uid()));

-- Policies for 'tasks' table
create policy "Team members can view tasks." on public.tasks for select using (is_member_of_project(project_id, auth.uid()));
create policy "Team members can create tasks." on public.tasks for insert with check (is_member_of_project(project_id, auth.uid()));
create policy "Team members can update tasks." on public.tasks for update using (is_member_of_project(project_id, auth.uid()));
create policy "Team members can delete tasks." on public.tasks for delete using (is_member_of_project(project_id, auth.uid()));

-- Policies for 'milestones' table
create policy "Team members can view milestones." on public.milestones for select using (is_member_of_project(project_id, auth.uid()));
create policy "Team members can create milestones." on public.milestones for insert with check (is_member_of_project(project_id, auth.uid()));
create policy "Team members can update milestones." on public.milestones for update using (is_member_of_project(project_id, auth.uid()));
create policy "Team members can delete milestones." on public.milestones for delete using (is_member_of_project(project_id, auth.uid()));


-- 3. TRIGGERS AND FUNCTIONS
-- Function to create a profile for a new user
create or replace function public.handle_new_user()
returns trigger
language plpgsql
security definer set search_path = public
as $$
begin
  insert into public.profiles (id, full_name, avatar_url, role)
  values (new.id, new.raw_user_meta_data->>'full_name', new.raw_user_meta_data->>'avatar_url', 'Engineer');
  return new;
end;
$$;

-- Trigger to call the function when a new user signs up
create trigger on_auth_user_created
  after insert on auth.users
  for each row execute procedure public.handle_new_user();

-- Function to add project creator to team members
create or replace function public.add_creator_to_team()
returns trigger
language plpgsql
security definer set search_path = public
as $$
begin
  insert into public.project_team_members (project_id, user_id)
  values (new.id, new.created_by);
  return new;
end;
$$;

-- Trigger to call the function when a new project is created
create trigger on_project_created
  after insert on public.projects
  for each row execute procedure public.add_creator_to_team();
`;

interface SetupPageProps {
  onConfigured: () => void;
}

const SetupPage: React.FC<SetupPageProps> = ({ onConfigured }) => {
  const [supabaseUrl, setSupabaseUrl] = useState('');
  const [supabaseAnonKey, setSupabaseAnonKey] = useState('');
  const [copyButtonText, setCopyButtonText] = useState('Copy SQL');

  const handleSave = () => {
    if (!supabaseUrl.startsWith('http') || supabaseAnonKey.length < 50) {
      alert('Please enter a valid Supabase URL and Anon Key.');
      return;
    }
    localStorage.setItem('supabaseUrl', supabaseUrl);
    localStorage.setItem('supabaseAnonKey', supabaseAnonKey);
    onConfigured();
  };

  const handleCopySql = () => {
    navigator.clipboard.writeText(sqlSchema);
    setCopyButtonText('Copied!');
    setTimeout(() => setCopyButtonText('Copy SQL'), 2000);
  };

  return (
    <div className="flex items-center justify-center min-h-screen bg-gray-100 font-sans p-4">
      <div className="bg-white rounded-lg shadow-xl p-8 w-full max-w-4xl max-h-[95vh] flex flex-col">
        <h1 className="text-3xl font-bold text-center text-brand-primary mb-2">MEP-Dash Setup</h1>
        <p className="text-center text-neutral-medium mb-6">
          Welcome! To get started, please configure your Supabase backend.
        </p>

        <div className="grid grid-cols-1 lg:grid-cols-2 gap-8 flex-grow overflow-hidden">
          {/* Left Column: Instructions & Inputs */}
          <div className="flex flex-col space-y-6">
            <div>
              <h2 className="text-xl font-semibold text-neutral-dark mb-2">Step 1: Configure Credentials</h2>
              <p className="text-sm text-neutral-medium mb-4">
                Find your Project URL and public anon key in your Supabase Dashboard under <code className="bg-gray-200 p-1 rounded">Settings &gt; API</code>.
              </p>
              <div className="space-y-4">
                <div>
                  <label htmlFor="supabaseUrl" className="block text-sm font-medium text-neutral-medium">Supabase Project URL</label>
                  <input
                    type="url"
                    id="supabaseUrl"
                    placeholder="https://your-project-id.supabase.co"
                    value={supabaseUrl}
                    onChange={(e) => setSupabaseUrl(e.target.value)}
                    className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-brand-primary focus:border-brand-primary"
                  />
                </div>
                <div>
                  <label htmlFor="supabaseAnonKey" className="block text-sm font-medium text-neutral-medium">Supabase Public Anon Key</label>
                  <input
                    type="text"
                    id="supabaseAnonKey"
                    placeholder="eyJhbGciOiJIUzI1NiIsInR5cCI6..."
                    value={supabaseAnonKey}
                    onChange={(e) => setSupabaseAnonKey(e.target.value)}
                    className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-brand-primary focus:border-brand-primary"
                  />
                </div>
              </div>
            </div>
             <button
                onClick={handleSave}
                className="w-full bg-brand-primary text-white font-bold py-3 px-4 rounded-lg hover:bg-brand-dark transition-colors disabled:opacity-50"
              >
                Save Credentials and Launch
            </button>
          </div>

          {/* Right Column: SQL Schema */}
          <div className="flex flex-col overflow-hidden">
            <div className="flex justify-between items-center mb-2">
                 <h2 className="text-xl font-semibold text-neutral-dark">Step 2: Set Up Database</h2>
                 <button
                    onClick={handleCopySql}
                    className="px-4 py-2 text-sm font-medium text-white bg-status-green rounded-md hover:bg-green-700 transition-colors"
                  >
                    {copyButtonText}
                </button>
            </div>
            <p className="text-sm text-neutral-medium mb-2 flex-shrink-0">
                Copy this schema and run it in your Supabase Dashboard's <code className="bg-gray-200 p-1 rounded">SQL Editor</code>.
            </p>
            <div className="bg-neutral-dark text-white rounded-lg p-4 overflow-auto flex-grow">
              <pre className="text-xs whitespace-pre-wrap">
                <code>{sqlSchema}</code>
              </pre>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default SetupPage;
