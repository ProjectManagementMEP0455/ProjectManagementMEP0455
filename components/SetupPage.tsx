import React, { useState } from 'react';

interface SetupPageProps {
  onConfigured: () => void;
}

const supabaseSchema = `
-- MEP PROJECT MANAGEMENT PRO - SUPABASE SCHEMA
-- version 1.4 (Definitive RLS Fix)
-- This script is idempotent and can be run multiple times without causing errors.

-- 1. TABLES
-- Create a table for public profiles if it doesn't exist
create table if not exists public.profiles (
  id uuid not null references auth.users on delete cascade,
  updated_at timestamp with time zone,
  full_name text,
  avatar_url text,
  role text,

  primary key (id)
);

-- Create projects table if it doesn't exist
create table if not exists public.projects (
  id bigint generated by default as identity primary key,
  created_at timestamp with time zone default now() not null,
  name text not null,
  description text,
  start_date date,
  end_date date,
  budget numeric,
  spent numeric,
  status text not null default 'Planning',
  -- DEFINITIVE FIX: Reference public.profiles instead of auth.users to resolve RLS conflicts.
  created_by uuid not null references public.profiles on delete cascade
);

-- Create a junction table for team members if it doesn't exist
create table if not exists public.project_team_members (
  project_id bigint not null references public.projects on delete cascade,
  user_id uuid not null references public.profiles on delete cascade,
  
  primary key (project_id, user_id)
);

-- Create tasks table if it doesn't exist
create table if not exists public.tasks (
  id bigint generated by default as identity primary key,
  created_at timestamp with time zone default now() not null,
  name text not null,
  description text,
  status text not null default 'To Do',
  due_date date,
  assignee_id uuid references public.profiles on delete set null,
  project_id bigint not null references public.projects on delete cascade,
  percent_complete smallint default 0
);

-- Create milestones table if it doesn't exist
create table if not exists public.milestones (
  id bigint generated by default as identity primary key,
  created_at timestamp with time zone default now() not null,
  name text not null,
  due_date date not null,
  completed boolean default false,
  project_id bigint not null references public.projects on delete cascade
);


-- 2. ROW LEVEL SECURITY (RLS)
-- Enable RLS for all tables
alter table public.profiles enable row level security;
alter table public.projects enable row level security;
alter table public.project_team_members enable row level security;
alter table public.tasks enable row level security;
alter table public.milestones enable row level security;

-- Policies for 'profiles' table
drop policy if exists "Users can view their own profile." on public.profiles;
create policy "Users can view their own profile." on public.profiles for select using (auth.uid() = id);

drop policy if exists "Users can update their own profile." on public.profiles;
create policy "Users can update their own profile." on public.profiles for update using (auth.uid() = id);

drop policy if exists "Allow authenticated users to view all profiles." on public.profiles;
create policy "Allow authenticated users to view all profiles." on public.profiles for select to authenticated using (true);


-- RLS Helper function to check project membership
create or replace function is_member_of_project(p_project_id bigint, p_user_id uuid)
returns boolean
language plpgsql
security definer
as $$
begin
  return exists (
    select 1
    from project_team_members
    where project_id = p_project_id and user_id = p_user_id
  );
end;
$$;

-- Policies for 'projects' table
drop policy if exists "Team members can view their projects." on public.projects;
create policy "Team members can view their projects." on public.projects for select using (is_member_of_project(id, auth.uid()));

drop policy if exists "Project creator can update their project." on public.projects;
create policy "Project creator can update their project." on public.projects for update using (auth.uid() = created_by);

drop policy if exists "Authenticated users can create projects for themselves." on public.projects;
create policy "Authenticated users can create projects for themselves." on public.projects for insert with check (auth.uid() = created_by);

drop policy if exists "Project creator can delete their project." on public.projects;
create policy "Project creator can delete their project." on public.projects for delete using (auth.uid() = created_by);

-- Policies for 'project_team_members' table
drop policy if exists "Team members can view project members." on public.project_team_members;
create policy "Team members can view project members." on public.project_team_members for select using (is_member_of_project(project_id, auth.uid()));

drop policy if exists "Project creators can add or remove team members." on public.project_team_members;
create policy "Project creators can add or remove team members." on public.project_team_members for all using (
  exists (
    select 1 from projects
    where projects.id = project_id and projects.created_by = auth.uid()
  )
);


-- Policies for 'tasks' table
drop policy if exists "Team members can manage tasks." on public.tasks;
create policy "Team members can manage tasks." on public.tasks for all using (is_member_of_project(project_id, auth.uid()));

-- Policies for 'milestones' table
drop policy if exists "Team members can manage milestones." on public.milestones;
create policy "Team members can manage milestones." on public.milestones for all using (is_member_of_project(project_id, auth.uid()));


-- 3. TRIGGERS AND FUNCTIONS
-- Function to create a profile for a new user
create or replace function public.handle_new_user()
returns trigger
language plpgsql
security definer set search_path = public
as $$
begin
  insert into public.profiles (id, full_name, avatar_url, role)
  values (new.id, new.raw_user_meta_data->>'full_name', new.raw_user_meta_data->>'avatar_url', 'Engineer');
  return new;
end;
$$;

-- Trigger to call the function when a new user signs up
drop trigger if exists on_auth_user_created on auth.users;
create trigger on_auth_user_created
  after insert on auth.users
  for each row execute procedure public.handle_new_user();
`;

const SetupPage: React.FC<SetupPageProps> = ({ onConfigured }) => {
  const [supabaseUrl, setSupabaseUrl] = useState('');
  const [supabaseAnonKey, setSupabaseAnonKey] = useState('');
  const [step, setStep] = useState(1);
  const [copied, setCopied] = useState(false);

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (supabaseUrl && supabaseAnonKey) {
      localStorage.setItem('supabaseUrl', supabaseUrl);
      localStorage.setItem('supabaseAnonKey', supabaseAnonKey);
      onConfigured();
    } else {
      alert('Please provide both a Supabase URL and an Anon Key.');
    }
  };
  
  const handleCopy = () => {
      navigator.clipboard.writeText(supabaseSchema.trim());
      setCopied(true);
      setTimeout(() => setCopied(false), 2000);
  }

  return (
    <div className="flex items-center justify-center min-h-screen bg-gray-100 font-sans">
      <div className="p-8 bg-white rounded-lg shadow-md w-full max-w-2xl">
        <h1 className="text-3xl font-bold text-center text-brand-primary mb-2">MEP-Dash Setup</h1>
        <p className="text-center text-neutral-medium mb-8">Let's connect to your Supabase project.</p>

        {step === 1 && (
            <div>
                <h2 className="text-xl font-semibold text-neutral-dark mb-4">Step 1: Database Schema</h2>
                <p className="text-neutral-medium mb-4">
                    First, you need to set up your database. Go to the <a href="https://supabase.com/dashboard/project/_/sql" target="_blank" rel="noopener noreferrer" className="text-brand-primary hover:underline">SQL Editor</a> in your Supabase project dashboard and run the following script.
                </p>
                <div className="relative">
                    <textarea
                        readOnly
                        className="w-full h-48 p-2 border border-gray-300 rounded-md bg-gray-50 font-mono text-sm"
                        value={supabaseSchema.trim()}
                    />
                    <button 
                        onClick={handleCopy}
                        className="absolute top-2 right-2 bg-gray-200 hover:bg-gray-300 text-neutral-dark text-sm font-semibold py-1 px-2 rounded-md"
                    >
                        {copied ? 'Copied!' : 'Copy'}
                    </button>
                </div>
                <div className="mt-6 flex justify-end">
                    <button onClick={() => setStep(2)} className="w-full sm:w-auto bg-brand-primary text-white font-bold py-2 px-6 rounded-lg hover:bg-brand-dark transition-colors">
                        Next Step
                    </button>
                </div>
            </div>
        )}

        {step === 2 && (
            <div>
                 <h2 className="text-xl font-semibold text-neutral-dark mb-4">Step 2: API Credentials</h2>
                 <p className="text-neutral-medium mb-4">
                    Now, enter your Supabase project's API URL and Anon Key. You can find these in your project's <a href="https://supabase.com/dashboard/project/_/settings/api" target="_blank" rel="noopener noreferrer" className="text-brand-primary hover:underline">API Settings</a>.
                 </p>
                <form onSubmit={handleSubmit} className="space-y-4">
                  <div>
                    <label className="text-sm font-medium text-neutral-medium" htmlFor="supabaseUrl">Project URL</label>
                    <input
                      id="supabaseUrl"
                      type="text"
                      placeholder="https://your-project-id.supabase.co"
                      value={supabaseUrl}
                      onChange={(e) => setSupabaseUrl(e.target.value)}
                      className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-brand-primary focus:border-brand-primary"
                      required
                    />
                  </div>
                  <div>
                    <label className="text-sm font-medium text-neutral-medium" htmlFor="supabaseAnonKey">Project Anon Key</label>
                    <input
                      id="supabaseAnonKey"
                      type="text"
                      placeholder="ey..."
                      value={supabaseAnonKey}
                      onChange={(e) => setSupabaseAnonKey(e.target.value)}
                      className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-brand-primary focus:border-brand-primary"
                      required
                    />
                  </div>
                  <div className="flex justify-between items-center pt-4">
                     <button type="button" onClick={() => setStep(1)} className="px-4 py-2 text-sm font-medium text-neutral-dark bg-gray-200 rounded-md hover:bg-gray-300 transition-colors">
                        Back
                     </button>
                    <button
                        type="submit"
                        className="bg-brand-primary text-white font-bold py-2 px-6 rounded-lg hover:bg-brand-dark transition-colors"
                    >
                        Save and Continue
                    </button>
                  </div>
                </form>
            </div>
        )}
      </div>
    </div>
  );
};

export default SetupPage;
