
import React, { useState } from 'react';

const fullSqlScript = `
-- MEP-DASH: UNIVERSAL RESET & SETUP SCRIPT
-- This script safely cleans up previous attempts and sets up the
-- entire database from scratch. It is safe to run multiple times.
--
-- INSTRUCTIONS:
-- 1. Create the 4 demo users in the Auth section:
--    - admin@mep-dash.com
--    - director@mep-dash.com
--    - manager@mep-dash.com
--    - engineer@mep-dash.com
-- 2. Run this entire script once in the Supabase SQL Editor.
----------------------------------------------------------------

-- PART 0: CLEANUP (Drop existing objects if they exist)
DROP FUNCTION IF EXISTS public.is_admin(uuid) CASCADE;
DROP FUNCTION IF EXISTS public.is_member_of_project(bigint, uuid) CASCADE;
DROP FUNCTION IF EXISTS public.update_project_spent() CASCADE;
DROP FUNCTION IF EXISTS public.update_project_budget() CASCADE;
DROP TABLE IF EXISTS public.milestones CASCADE;
DROP TABLE IF EXISTS public.tasks CASCADE;
DROP TABLE IF EXISTS public.project_team_members CASCADE;
DROP TABLE IF EXISTS public.projects CASCADE;
DROP TABLE IF EXISTS public.profiles CASCADE;
DROP TYPE IF EXISTS public.task_status;
DROP TYPE IF EXISTS public.project_status;
DROP TYPE IF EXISTS public.user_role;

-- PART 1: CREATE TABLES & CUSTOM TYPES
CREATE TYPE public.user_role AS ENUM ('Admin', 'Project Director', 'Project Manager', 'Assistant Project Manager', 'Engineer / Supervisor', 'Site Engineer / Technician');
CREATE TYPE public.project_status AS ENUM ('Active', 'Planning', 'Completed', 'On Hold');
CREATE TYPE public.task_status AS ENUM ('To Do', 'In Progress', 'Done');

CREATE TABLE public.profiles (
    id uuid NOT NULL PRIMARY KEY REFERENCES auth.users ON DELETE CASCADE,
    full_name text,
    avatar_url text,
    role public.user_role
);
CREATE TABLE public.projects (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    name text NOT NULL,
    description text,
    start_date date,
    end_date date,
    budget numeric DEFAULT 0,
    spent numeric DEFAULT 0,
    status public.project_status DEFAULT 'Planning'::public.project_status,
    created_by uuid REFERENCES public.profiles ON DELETE SET NULL
);
CREATE TABLE public.project_team_members (
    project_id bigint NOT NULL REFERENCES public.projects ON DELETE CASCADE,
    user_id uuid NOT NULL REFERENCES public.profiles ON DELETE CASCADE,
    PRIMARY KEY (project_id, user_id)
);
CREATE TABLE public.tasks (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    name text NOT NULL,
    description text,
    status public.task_status DEFAULT 'To Do'::public.task_status,
    start_date date,
    due_date date,
    assignee_id uuid REFERENCES public.profiles ON DELETE SET NULL,
    project_id bigint NOT NULL REFERENCES public.projects ON DELETE CASCADE,
    percent_complete integer DEFAULT 0 CHECK (percent_complete >= 0 AND percent_complete <= 100),
    budgeted_cost numeric DEFAULT 0,
    spent_cost numeric DEFAULT 0,
    proposed_spent_cost numeric,
    pending_approval boolean DEFAULT false NOT NULL
);
CREATE TABLE public.milestones (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    name text NOT NULL,
    due_date date NOT NULL,
    project_id bigint NOT NULL REFERENCES public.projects ON DELETE CASCADE,
    completed boolean DEFAULT false NOT NULL
);

-- PART 2: TRIGGERS & HELPER FUNCTIONS
-- Function to update project spent amount based on its tasks
CREATE OR REPLACE FUNCTION public.update_project_spent()
RETURNS TRIGGER AS $$
BEGIN
    UPDATE public.projects
    SET spent = (
      SELECT COALESCE(SUM(spent_cost), 0)
      FROM public.tasks
      WHERE project_id = COALESCE(NEW.project_id, OLD.project_id)
    )
    WHERE id = COALESCE(NEW.project_id, OLD.project_id);
    RETURN NEW;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Trigger to call the spent update function
CREATE TRIGGER tasks_update_spent_trigger
AFTER INSERT OR UPDATE OF spent_cost OR DELETE ON public.tasks
FOR EACH ROW EXECUTE FUNCTION public.update_project_spent();

-- Function to update project budget based on its tasks
CREATE OR REPLACE FUNCTION public.update_project_budget()
RETURNS TRIGGER AS $$
BEGIN
    UPDATE public.projects
    SET budget = (
      SELECT COALESCE(SUM(budgeted_cost), 0)
      FROM public.tasks
      WHERE project_id = COALESCE(NEW.project_id, OLD.project_id)
    )
    WHERE id = COALESCE(NEW.project_id, OLD.project_id);
    RETURN NEW;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Trigger to call the budget update function
CREATE TRIGGER tasks_update_budget_trigger
AFTER INSERT OR UPDATE OF budgeted_cost OR DELETE ON public.tasks
FOR EACH ROW EXECUTE FUNCTION public.update_project_budget();


-- PART 3: RLS (Row Level Security)
-- Helper function to check if a user is an admin
CREATE OR REPLACE FUNCTION public.is_admin(u_id uuid)
RETURNS boolean
LANGUAGE sql
SECURITY DEFINER
SET search_path = public
AS $$
  SELECT EXISTS (
    SELECT 1 FROM profiles
    WHERE id = u_id AND role = 'Admin'::public.user_role
  );
$$;

-- Helper function to check project membership to avoid RLS recursion
CREATE OR REPLACE FUNCTION public.is_member_of_project(p_id bigint, u_id uuid)
RETURNS boolean
LANGUAGE sql
SECURITY DEFINER
SET search_path = public
AS $$
  SELECT EXISTS (
    SELECT 1 FROM project_team_members
    WHERE project_id = p_id AND user_id = u_id
  );
$$;

-- ENABLE ROW LEVEL SECURITY (RLS) & DEFINE POLICIES
ALTER TABLE public.profiles ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.projects ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.project_team_members ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.tasks ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.milestones ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Public profiles are viewable by everyone." ON public.profiles FOR SELECT USING (true);
CREATE POLICY "Users can insert their own profile." ON public.profiles FOR INSERT WITH CHECK (auth.uid() = id);
CREATE POLICY "Users can update their own profile or Admins can update any." ON public.profiles FOR UPDATE USING (auth.uid() = id OR public.is_admin(auth.uid()));

CREATE POLICY "Admins or team members can view projects." ON public.projects FOR SELECT USING (public.is_member_of_project(id, auth.uid()) OR public.is_admin(auth.uid()));
CREATE POLICY "Admins/Directors/Managers can create projects." ON public.projects FOR INSERT WITH CHECK (((SELECT role FROM public.profiles WHERE id = auth.uid()) IN ('Admin'::public.user_role, 'Project Director'::public.user_role, 'Project Manager'::public.user_role)));
CREATE POLICY "Admins or team Directors/Managers can update projects." ON public.projects FOR UPDATE USING ((public.is_member_of_project(id, auth.uid()) AND (SELECT role FROM public.profiles WHERE id = auth.uid()) IN ('Project Director'::public.user_role, 'Project Manager'::public.user_role)) OR public.is_admin(auth.uid()));

CREATE POLICY "Admins or team members can view project members." ON public.project_team_members FOR SELECT USING (public.is_member_of_project(project_id, auth.uid()) OR public.is_admin(auth.uid()));
CREATE POLICY "Admins or team Directors/Managers can manage team." ON public.project_team_members FOR ALL USING (((public.is_member_of_project(project_id, auth.uid()) AND (SELECT role FROM public.profiles WHERE id = auth.uid()) IN ('Project Director'::public.user_role, 'Project Manager'::public.user_role))) OR public.is_admin(auth.uid()));

CREATE POLICY "Admins or team members can view tasks." ON public.tasks FOR SELECT USING (public.is_member_of_project(project_id, auth.uid()) OR public.is_admin(auth.uid()));
CREATE POLICY "Admins or team members can manage tasks." ON public.tasks FOR ALL USING (public.is_member_of_project(project_id, auth.uid()) OR public.is_admin(auth.uid()));

CREATE POLICY "Admins or team members can view milestones." ON public.milestones FOR SELECT USING (public.is_member_of_project(project_id, auth.uid()) OR public.is_admin(auth.uid()));
CREATE POLICY "Admins or team Managers can manage milestones." ON public.milestones FOR ALL USING (((public.is_member_of_project(project_id, auth.uid()) AND (SELECT role FROM public.profiles WHERE id = auth.uid()) IN ('Project Director'::public.user_role, 'Project Manager'::public.user_role, 'Assistant Project Manager'::public.user_role))) OR public.is_admin(auth.uid()));


-- PART 4: PRE-FLIGHT CHECK & SAMPLE DATA INSERTION
DO $$
BEGIN
  IF NOT EXISTS (SELECT 1 FROM auth.users WHERE email = 'admin@mep-dash.com') THEN
    RAISE EXCEPTION 'SETUP FAILED: Demo user "admin@mep-dash.com" not found. Please create the four required demo users in the "Authentication" section and run this script again.';
  END IF;
  IF NOT EXISTS (SELECT 1 FROM auth.users WHERE email = 'director@mep-dash.com') THEN
    RAISE EXCEPTION 'SETUP FAILED: Demo user "director@mep-dash.com" not found. Please create the four required demo users in the "Authentication" section and run this script again.';
  END IF;
  IF NOT EXISTS (SELECT 1 FROM auth.users WHERE email = 'manager@mep-dash.com') THEN
    RAISE EXCEPTION 'SETUP FAILED: Demo user "manager@mep-dash.com" not found. Please create the four required demo users in the "Authentication" section and run this script again.';
  END IF;
  IF NOT EXISTS (SELECT 1 FROM auth.users WHERE email = 'engineer@mep-dash.com') THEN
    RAISE EXCEPTION 'SETUP FAILED: Demo user "engineer@mep-dash.com" not found. Please create the four required demo users in the "Authentication" section and run this script again.';
  END IF;
END $$;

WITH demo_users AS (
  SELECT id, email FROM auth.users
  WHERE email IN ('admin@mep-dash.com', 'director@mep-dash.com', 'manager@mep-dash.com', 'engineer@mep-dash.com')
),
inserted_profiles AS (
  INSERT INTO public.profiles (id, full_name, avatar_url, role)
  SELECT
    u.id,
    CASE
      WHEN u.email = 'admin@mep-dash.com' THEN 'Sam Admin'
      WHEN u.email = 'director@mep-dash.com' THEN 'Alex Director'
      WHEN u.email = 'manager@mep-dash.com' THEN 'Brianna Manager'
      WHEN u.email = 'engineer@mep-dash.com' THEN 'Charlie Engineer'
    END,
    'https://i.pravatar.cc/150?u=' || u.email,
    CASE
      WHEN u.email = 'admin@mep-dash.com' THEN 'Admin'::public.user_role
      WHEN u.email = 'director@mep-dash.com' THEN 'Project Director'::public.user_role
      WHEN u.email = 'manager@mep-dash.com' THEN 'Project Manager'::public.user_role
      WHEN u.email = 'engineer@mep-dash.com' THEN 'Site Engineer / Technician'::public.user_role
    END
  FROM demo_users u
  ON CONFLICT (id) DO UPDATE SET
    full_name = EXCLUDED.full_name,
    avatar_url = EXCLUDED.avatar_url,
    role = EXCLUDED.role
),
inserted_projects AS (
  INSERT INTO public.projects (name, description, start_date, end_date, budget, spent, status, created_by)
  VALUES
    ('Corporate HQ HVAC Overhaul', 'Complete overhaul of the HVAC system for the 15-story downtown corporate headquarters.', '2024-05-01', '2024-12-20', 0, 0, 'Active', (SELECT id FROM demo_users WHERE email = 'director@mep-dash.com')),
    ('Hospital Wing Electrical Upgrade', 'Upgrade of all electrical systems for the new pediatric wing.', '2024-07-15', '2025-03-31', 0, 0, 'Planning', (SELECT id FROM demo_users WHERE email = 'manager@mep-dash.com')),
    ('Retail Center Plumbing & Fire Sprinklers', 'Installation of all new plumbing and fire sprinkler systems for a 50,000 sq ft retail center.', '2023-11-01', '2024-08-30', 0, 0, 'Active', (SELECT id FROM demo_users WHERE email = 'manager@mep-dash.com')),
    ('Data Center Cooling System', 'Design and build of a high-efficiency redundant cooling system.', '2024-01-10', '2024-06-25', 0, 0, 'Completed', (SELECT id FROM demo_users WHERE email = 'director@mep-dash.com'))
  RETURNING id, name
),
inserted_team_members AS (
  INSERT INTO public.project_team_members (project_id, user_id)
  VALUES
    ((SELECT id FROM inserted_projects WHERE name = 'Corporate HQ HVAC Overhaul'), (SELECT id FROM demo_users WHERE email = 'director@mep-dash.com')),
    ((SELECT id FROM inserted_projects WHERE name = 'Corporate HQ HVAC Overhaul'), (SELECT id FROM demo_users WHERE email = 'manager@mep-dash.com')),
    ((SELECT id FROM inserted_projects WHERE name = 'Corporate HQ HVAC Overhaul'), (SELECT id FROM demo_users WHERE email = 'engineer@mep-dash.com')),
    ((SELECT id FROM inserted_projects WHERE name = 'Hospital Wing Electrical Upgrade'), (SELECT id FROM demo_users WHERE email = 'manager@mep-dash.com')),
    ((SELECT id FROM inserted_projects WHERE name = 'Hospital Wing Electrical Upgrade'), (SELECT id FROM demo_users WHERE email = 'engineer@mep-dash.com')),
    ((SELECT id FROM inserted_projects WHERE name = 'Retail Center Plumbing & Fire Sprinklers'), (SELECT id FROM demo_users WHERE email = 'manager@mep-dash.com')),
    ((SELECT id FROM inserted_projects WHERE name = 'Retail Center Plumbing & Fire Sprinklers'), (SELECT id FROM demo_users WHERE email = 'engineer@mep-dash.com')),
    ((SELECT id FROM inserted_projects WHERE name = 'Data Center Cooling System'), (SELECT id FROM demo_users WHERE email = 'director@mep-dash.com')),
    ((SELECT id FROM inserted_projects WHERE name = 'Data Center Cooling System'), (SELECT id FROM demo_users WHERE email = 'manager@mep-dash.com'))
),
inserted_tasks AS (
  INSERT INTO public.tasks (name, description, status, start_date, due_date, assignee_id, project_id, percent_complete, budgeted_cost, spent_cost)
  VALUES
    ('Procure new chiller units', 'Submit PO and confirm delivery dates for two 500-ton chiller units.', 'Done', '2024-05-10', '2024-06-15', (SELECT id FROM demo_users WHERE email = 'manager@mep-dash.com'), (SELECT id FROM inserted_projects WHERE name = 'Corporate HQ HVAC Overhaul'), 100, 3500000, 3450000),
    ('Install rooftop chiller #1', 'Crane lift and installation of the first chiller unit on the main roof.', 'In Progress', '2024-08-15', '2024-09-01', (SELECT id FROM demo_users WHERE email = 'engineer@mep-dash.com'), (SELECT id FROM inserted_projects WHERE name = 'Corporate HQ HVAC Overhaul'), 50, 800000, 450000),
    ('Install rooftop chiller #2', 'Crane lift and installation of the second chiller unit.', 'To Do', '2024-09-02', '2024-09-15', (SELECT id FROM demo_users WHERE email = 'engineer@mep-dash.com'), (SELECT id FROM inserted_projects WHERE name = 'Corporate HQ HVAC Overhaul'), 0, 800000, 0)
)
INSERT INTO public.milestones (name, due_date, project_id, completed)
VALUES
  ('Equipment Procurement Complete', '2024-07-01', (SELECT id FROM inserted_projects WHERE name = 'Corporate HQ HVAC Overhaul'), true),
  ('Rooftop Installation Complete', '2024-09-30', (SELECT id FROM inserted_projects WHERE name = 'Corporate HQ HVAC Overhaul'), false),
  ('System Commissioning', '2024-12-01', (SELECT id FROM inserted_projects WHERE name = 'Corporate HQ HVAC Overhaul'), false);

SELECT 'SUCCESS: MEP-Dash database has been reset and set up successfully!' as status;
`;

const SqlSetupPreview: React.FC = () => {
    const [copyButtonText, setCopyButtonText] = useState('Copy Script');

    const handleCopy = () => {
        navigator.clipboard.writeText(fullSqlScript.trim());
        setCopyButtonText('Copied!');
        setTimeout(() => setCopyButtonText('Copy Script'), 2000);
    };

    return (
        <div className="mt-8 border-t pt-6">
            <h2 className="text-xl font-bold text-center text-neutral-dark mb-4">Supabase SQL Setup Script</h2>
            <p className="text-center text-neutral-medium mb-4 text-sm">
                For first-time setup, run this entire script in your Supabase project's SQL Editor.
            </p>
            <div className="relative bg-neutral-dark rounded-lg p-4">
                <button
                    onClick={handleCopy}
                    className="absolute top-2 right-2 bg-brand-primary text-white font-semibold py-1 px-3 rounded-md hover:bg-brand-dark transition-colors text-sm"
                >
                    {copyButtonText}
                </button>
                <pre className="text-white text-xs overflow-x-auto max-h-64">
                    <code>{fullSqlScript.trim()}</code>
                </pre>
            </div>
        </div>
    );
};

export default SqlSetupPreview;
