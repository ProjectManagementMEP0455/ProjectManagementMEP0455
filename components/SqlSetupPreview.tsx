import React, { useState } from 'react';
import Button from './ui/Button';

const sqlScript = `-- MEP-DASH: UNIVERSAL RESET & SETUP SCRIPT V4
-- This script safely cleans up previous attempts and sets up the
-- entire database from scratch for a multi-user, persistent application.
-- It is safe to run multiple times.
--
-- INSTRUCTIONS:
-- 1. In your Supabase Dashboard, go to Storage and create THREE new
--    public buckets: 'invoices', 'progress-photos', and 'request-attachments'.
-- 2. Run this entire script once in the Supabase SQL Editor.
-- 3. After running, the application is ready. The first user to sign up
--    will automatically be designated as the system Admin.
----------------------------------------------------------------

-- PART 0: CLEANUP (Drop existing objects if they exist)
DROP TRIGGER IF EXISTS on_auth_user_created ON auth.users;
DROP FUNCTION IF EXISTS public.handle_new_user() CASCADE;
DROP FUNCTION IF EXISTS public.is_admin(uuid) CASCADE;
DROP FUNCTION IF EXISTS public.is_member_of_project(bigint, uuid) CASCADE;
DROP FUNCTION IF EXISTS public.update_project_spent() CASCADE;
DROP FUNCTION IF EXISTS public.update_project_budget() CASCADE;
DROP FUNCTION IF EXISTS public.update_task_spent_cost() CASCADE;
DROP TABLE IF EXISTS public.progress_photos CASCADE;
DROP TABLE IF EXISTS public.requests CASCADE;
DROP TABLE IF EXISTS public.expenses CASCADE;
DROP TABLE IF EXISTS public.milestones CASCADE;
DROP TABLE IF EXISTS public.tasks CASCADE;
DROP TABLE IF EXISTS public.project_team_members CASCADE;
DROP TABLE IF EXISTS public.projects CASCADE;
DROP TABLE IF EXISTS public.materials_master CASCADE;
DROP TABLE IF EXISTS public.profiles CASCADE;
DROP TYPE IF EXISTS public.request_status;
DROP TYPE IF EXISTS public.task_status;
DROP TYPE IF EXISTS public.project_status;
DROP TYPE IF EXISTS public.user_role;

-- PART 1: CREATE TABLES & CUSTOM TYPES
CREATE TYPE public.user_role AS ENUM ('Admin', 'Project Director', 'Project Manager', 'Assistant Project Manager', 'Engineer / Supervisor', 'Site Engineer / Technician', 'Office Accountant');
CREATE TYPE public.project_status AS ENUM ('Active', 'Planning', 'Completed', 'On Hold');
CREATE TYPE public.task_status AS ENUM ('To Do', 'In Progress', 'Done');
CREATE TYPE public.request_status AS ENUM ('Pending', 'Approved', 'Rejected', 'Processed');

CREATE TABLE public.profiles (
    id uuid NOT NULL PRIMARY KEY REFERENCES auth.users ON DELETE CASCADE,
    full_name text,
    avatar_url text,
    role public.user_role
);
CREATE TABLE public.materials_master (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name text NOT NULL,
    unit text,
    created_at timestamp with time zone DEFAULT now() NOT NULL
);
CREATE TABLE public.projects (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    name text NOT NULL,
    description text,
    start_date date,
    end_date date,
    budget numeric DEFAULT 0,
    spent numeric DEFAULT 0,
    status public.project_status DEFAULT 'Planning'::public.project_status,
    created_by uuid REFERENCES public.profiles ON DELETE SET NULL
);
CREATE TABLE public.project_team_members (
    project_id bigint NOT NULL REFERENCES public.projects ON DELETE CASCADE,
    user_id uuid NOT NULL REFERENCES public.profiles ON DELETE CASCADE,
    PRIMARY KEY (project_id, user_id)
);
CREATE TABLE public.tasks (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    name text NOT NULL,
    description text,
    status public.task_status DEFAULT 'To Do'::public.task_status,
    start_date date,
    due_date date,
    assignee_id uuid REFERENCES public.profiles ON DELETE SET NULL,
    project_id bigint NOT NULL REFERENCES public.projects ON DELETE CASCADE,
    percent_complete integer DEFAULT 0 CHECK (percent_complete >= 0 AND percent_complete <= 100),
    budgeted_cost numeric DEFAULT 0,
    spent_cost numeric DEFAULT 0
);
CREATE TABLE public.milestones (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    name text NOT NULL,
    due_date date NOT NULL,
    project_id bigint NOT NULL REFERENCES public.projects ON DELETE CASCADE,
    completed boolean DEFAULT false NOT NULL
);
CREATE TABLE public.expenses (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    task_id bigint NOT NULL REFERENCES public.tasks ON DELETE CASCADE,
    project_id bigint NOT NULL REFERENCES public.projects ON DELETE CASCADE,
    description text NOT NULL,
    amount numeric NOT NULL,
    created_by uuid NOT NULL REFERENCES public.profiles ON DELETE SET NULL,
    document_url text,
    expense_date date NOT NULL
);
CREATE TABLE public.requests (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    project_id bigint NOT NULL REFERENCES public.projects ON DELETE CASCADE,
    requested_by uuid NOT NULL REFERENCES public.profiles ON DELETE SET NULL,
    description text NOT NULL,
    estimated_cost numeric NOT NULL,
    status public.request_status DEFAULT 'Pending'::public.request_status,
    reviewed_by uuid REFERENCES public.profiles ON DELETE SET NULL,
    review_notes text,
    linked_expense_id bigint REFERENCES public.expenses ON DELETE SET NULL,
    document_url text
);
CREATE TABLE public.progress_photos (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    project_id bigint NOT NULL REFERENCES public.projects ON DELETE CASCADE,
    uploaded_by uuid NOT NULL REFERENCES public.profiles ON DELETE SET NULL,
    photo_url text NOT NULL,
    caption text,
    photo_date date NOT NULL
);


-- PART 2: TRIGGERS & AUTOMATION

-- Function to handle new user sign-ups
CREATE OR REPLACE FUNCTION public.handle_new_user()
RETURNS TRIGGER AS $$
DECLARE
  user_count integer;
  assigned_role public.user_role;
BEGIN
  -- Check if any user exists in profiles table
  SELECT count(*) INTO user_count FROM public.profiles;

  -- If no users exist, this is the first user, make them an Admin
  IF user_count = 0 THEN
    assigned_role := 'Admin';
  ELSE
    -- Otherwise, assign a default role
    assigned_role := 'Site Engineer / Technician';
  END IF;

  INSERT INTO public.profiles (id, full_name, avatar_url, role)
  VALUES (
    NEW.id,
    NEW.raw_user_meta_data->>'full_name',
    NEW.raw_user_meta_data->>'avatar_url',
    assigned_role
  );
  RETURN NEW;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Trigger to call the function when a new user is created in auth
CREATE TRIGGER on_auth_user_created
AFTER INSERT ON auth.users
FOR EACH ROW EXECUTE FUNCTION public.handle_new_user();


-- Function to update a task's total spent cost from its expenses
CREATE OR REPLACE FUNCTION public.update_task_spent_cost()
RETURNS TRIGGER AS $$
BEGIN
    UPDATE public.tasks
    SET spent_cost = (
        SELECT COALESCE(SUM(amount), 0)
        FROM public.expenses
        WHERE task_id = COALESCE(NEW.task_id, OLD.task_id)
    )
    WHERE id = COALESCE(NEW.task_id, OLD.task_id);
    RETURN NEW;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Trigger to call task spent update function when an expense changes
CREATE TRIGGER expenses_update_task_spent_trigger
AFTER INSERT OR UPDATE OF amount OR DELETE ON public.expenses
FOR EACH ROW EXECUTE FUNCTION public.update_task_spent_cost();

-- Function to update project spent amount based on its tasks
CREATE OR REPLACE FUNCTION public.update_project_spent()
RETURNS TRIGGER AS $$
BEGIN
    UPDATE public.projects
    SET spent = (
      SELECT COALESCE(SUM(spent_cost), 0)
      FROM public.tasks
      WHERE project_id = COALESCE(NEW.project_id, OLD.project_id)
    )
    WHERE id = COALESCE(NEW.project_id, OLD.project_id);
    RETURN NEW;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Trigger to call the project spent update function when a task's spent_cost changes
CREATE TRIGGER tasks_update_project_spent_trigger
AFTER INSERT OR UPDATE OF spent_cost OR DELETE ON public.tasks
FOR EACH ROW EXECUTE FUNCTION public.update_project_spent();

-- Function to update project budget based on its tasks
CREATE OR REPLACE FUNCTION public.update_project_budget()
RETURNS TRIGGER AS $$
BEGIN
    UPDATE public.projects
    SET budget = (
      SELECT COALESCE(SUM(budgeted_cost), 0)
      FROM public.tasks
      WHERE project_id = COALESCE(NEW.project_id, OLD.project_id)
    )
    WHERE id = COALESCE(NEW.project_id, OLD.project_id);
    RETURN NEW;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Trigger to call the budget update function
CREATE TRIGGER tasks_update_project_budget_trigger
AFTER INSERT OR UPDATE OF budgeted_cost OR DELETE ON public.tasks
FOR EACH ROW EXECUTE FUNCTION public.update_project_budget();


-- PART 3: RLS (Row Level Security)
-- Helper function to check if a user is an admin
CREATE OR REPLACE FUNCTION public.is_admin(u_id uuid)
RETURNS boolean LANGUAGE sql SECURITY DEFINER SET search_path = public AS $$
  SELECT EXISTS (SELECT 1 FROM profiles WHERE id = u_id AND role = 'Admin'::public.user_role);
$$;

-- Helper function to check project membership
CREATE OR REPLACE FUNCTION public.is_member_of_project(p_id bigint, u_id uuid)
RETURNS boolean LANGUAGE sql SECURITY DEFINER SET search_path = public AS $$
  SELECT EXISTS (SELECT 1 FROM project_team_members WHERE project_id = p_id AND user_id = u_id);
$$;

-- ENABLE RLS on all tables
ALTER TABLE public.profiles ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.projects ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.project_team_members ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.tasks ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.milestones ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.expenses ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.requests ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.progress_photos ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.materials_master ENABLE ROW LEVEL SECURITY;

-- POLICIES
CREATE POLICY "Public profiles are viewable by everyone." ON public.profiles FOR SELECT USING (true);
CREATE POLICY "Users can insert/update their own profile." ON public.profiles FOR ALL USING (auth.uid() = id);
CREATE POLICY "Admins can update any profile." ON public.profiles FOR UPDATE USING (public.is_admin(auth.uid()));

CREATE POLICY "Admins or team members can view projects." ON public.projects FOR SELECT USING (public.is_member_of_project(id, auth.uid()) OR public.is_admin(auth.uid()));
CREATE POLICY "Admins/Directors/Managers can create projects." ON public.projects FOR INSERT WITH CHECK (((SELECT role FROM public.profiles WHERE id = auth.uid()) IN ('Admin'::public.user_role, 'Project Director'::public.user_role, 'Project Manager'::public.user_role)));
CREATE POLICY "Admins or team Directors/Managers can update projects." ON public.projects FOR UPDATE USING ((public.is_member_of_project(id, auth.uid()) AND (SELECT role FROM public.profiles WHERE id = auth.uid()) IN ('Project Director'::public.user_role, 'Project Manager'::public.user_role)) OR public.is_admin(auth.uid()));

CREATE POLICY "Team members can view their own project members." ON public.project_team_members FOR SELECT USING (public.is_member_of_project(project_id, auth.uid()));
CREATE POLICY "Admins or team Directors/Managers can manage team." ON public.project_team_members FOR ALL USING (((public.is_member_of_project(project_id, auth.uid()) AND (SELECT role FROM public.profiles WHERE id = auth.uid()) IN ('Project Director'::public.user_role, 'Project Manager'::public.user_role))) OR public.is_admin(auth.uid()));

CREATE POLICY "Team members can view tasks." ON public.tasks FOR SELECT USING (public.is_member_of_project(project_id, auth.uid()));
CREATE POLICY "Team members (except technicians) can manage tasks." ON public.tasks FOR ALL USING ((public.is_member_of_project(project_id, auth.uid()) AND (SELECT role FROM public.profiles WHERE id = auth.uid()) <> 'Site Engineer / Technician'::public.user_role) OR public.is_admin(auth.uid()));

CREATE POLICY "Team members can view milestones." ON public.milestones FOR SELECT USING (public.is_member_of_project(project_id, auth.uid()));
CREATE POLICY "Admins or team Managers can manage milestones." ON public.milestones FOR ALL USING (((public.is_member_of_project(project_id, auth.uid()) AND (SELECT role FROM public.profiles WHERE id = auth.uid()) IN ('Project Director'::public.user_role, 'Project Manager'::public.user_role, 'Assistant Project Manager'::public.user_role))) OR public.is_admin(auth.uid()));

CREATE POLICY "Team members can view expenses." ON public.expenses FOR SELECT USING (public.is_member_of_project(project_id, auth.uid()));
CREATE POLICY "Accountants or Admins can manage expenses." ON public.expenses FOR ALL USING (((SELECT role FROM public.profiles WHERE id = auth.uid()) IN ('Office Accountant'::public.user_role, 'Admin'::public.user_role)));

CREATE POLICY "Team members can view requests." ON public.requests FOR SELECT USING (public.is_member_of_project(project_id, auth.uid()));
CREATE POLICY "Team members can create requests." ON public.requests FOR INSERT WITH CHECK (public.is_member_of_project(project_id, auth.uid()));
CREATE POLICY "Accountants or Admins can manage requests." ON public.requests FOR UPDATE USING (((SELECT role FROM public.profiles WHERE id = auth.uid()) IN ('Office Accountant'::public.user_role, 'Admin'::public.user_role)));

CREATE POLICY "Team members can view photos." ON public.progress_photos FOR SELECT USING (public.is_member_of_project(project_id, auth.uid()));
CREATE POLICY "Team members can upload photos." ON public.progress_photos FOR INSERT WITH CHECK (public.is_member_of_project(project_id, auth.uid()));
CREATE POLICY "Admins or uploader can delete photos." ON public.progress_photos FOR DELETE USING (public.is_admin(auth.uid()) OR uploaded_by = auth.uid());

CREATE POLICY "Admins can manage master materials list." ON public.materials_master FOR ALL USING (public.is_admin(auth.uid()));
CREATE POLICY "Authenticated users can view materials." ON public.materials_master FOR SELECT USING (auth.role() = 'authenticated');


-- PART 4: FINALIZATION
SELECT 'SUCCESS: MEP-Dash database has been set up for multi-user mode!' as status;`;

const SqlSetupPreview: React.FC = () => {
    const [copySuccess, setCopySuccess] = useState('');

    const copyToClipboard = () => {
        navigator.clipboard.writeText(sqlScript).then(() => {
            setCopySuccess('Copied!');
            setTimeout(() => setCopySuccess(''), 2000);
        }, () => {
            setCopySuccess('Failed to copy.');
             setTimeout(() => setCopySuccess(''), 2000);
        });
    };

    const getSupabaseSqlEditorUrl = () => {
        const supabaseUrl = localStorage.getItem('supabaseUrl');
        if (!supabaseUrl) return null;
        try {
            const url = new URL(supabaseUrl);
            const projectRef = url.hostname.split('.')[0];
            if (!projectRef) return null;
            return `https://app.supabase.com/project/${projectRef}/sql/new`;
        } catch (e) {
            console.error("Could not parse Supabase URL for SQL Editor link:", e);
            return null;
        }
    };

    const sqlEditorUrl = getSupabaseSqlEditorUrl();

    return (
        <div className="space-y-4">
            <p className="text-sm text-muted-foreground">
                Copy the full SQL script below and run it in your Supabase SQL Editor to create the necessary tables, functions, and security policies.
            </p>
            <div className="flex flex-wrap gap-4">
            {sqlEditorUrl && (
                <a 
                    href={sqlEditorUrl} 
                    target="_blank" 
                    rel="noopener noreferrer"
                    className="inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 bg-green-600 text-white hover:bg-green-700 h-10 px-4 py-2"
                >
                    Open Supabase SQL Editor
                </a>
            )}
             <Button onClick={copyToClipboard} variant="secondary">
                 {copySuccess || 'Copy SQL Script'}
            </Button>
            </div>
            <div className="relative mt-4">
                <pre className="bg-secondary text-foreground p-4 rounded-md max-h-64 overflow-auto text-xs">
                    <code>{sqlScript}</code>
                </pre>
            </div>
        </div>
    );
};

export default SqlSetupPreview;